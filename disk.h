#include "common.h"

#define DISK_ERROR -1
#define DISK_OK 0

/**
 * @struct Disk
 * 
 * @brief This struct is loaded from a disk file.
 * 
 * @param name Disk name
 * @param fd File descriptor saved when the disk file is opened.
*/
typedef struct Disk {
    char name[MAX_LENGTH_NAMES];
    int fd;
} Disk;

/**
 * @fn Disk_error
 * 
 * @brief This function prints the name of the current disk loaded
 * and the error generated by the called function
 * 
 * @param disk Current disk loaded that caused the error
 * @param msg Error msg
 * @return
*/
void Disk_error(Disk* disk, char* msg);

/**
 * @fn Disk_create
 * 
 * @brief This function allocates the memory for a Disk struct using the name decided by the user
 * 
 * @param name The name decided by the user from input
 * @return disk
*/
Disk *Disk_create(char* name);

/**
 * @fn Disk_destroy
 * 
 * @brief This function deallocates the memory of a Disk struct and all its items.
 * 
 * @param disk The disk that needs to be freed
 * @return DISK_OK || DISK_ERROR
*/
int Disk_destroy(Disk *disk);

/**
 * @fn Disk_open
 * 
 * @brief This function opens a disk file saved in the '/os/disks/' folder and loads its components from it.
 * It uses the open function saving a file descriptor fd in the disk struct.
 * 
 * @param disk The disk that needs to be opened
 * @return DISK_OK || DISK_ERROR
*/
int Disk_open(Disk* disk);

/**
 * @fn Disk_close
 * 
 * @brief This function closes the disk file opened and saved in the '/os/disks/' folder and unloads its components from it.
 * 
 * @param disk The disk that needs to be closed
 * @return DISK_OK
*/
int Disk_close(Disk* disk);

/**
 * @fn Disk_write
 * 
 * @brief This function writes on the disk file.
 * 
 * @param disk The disk used
 * @param buf The object that needs to be saved on the disk file
 * @param size The size of the buf in bytes
 * @return DISK_OK
*/
int Disk_write(Disk *disk, char *buf, int size);

/**
 * @fn Disk_read
 * 
 * @brief This function reads from the disk file.
 * 
 * @param disk The disk used
 * @param buf The object where the bytes read are saved
 * @param size The size in bytes of the disk file that needs to be read
 * @return DISK_OK
*/
int Disk_read(Disk *disk, char *buf, int size);

